/*
 * Copyright 2013-2015 microG Project Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'

dependencies {
    compile 'de.hdodenhof:circleimageview:1.2.1'
    compile 'com.squareup.wire:wire-runtime:1.6.1'

    compile project(':microg-ui-tools')
    compile project(':play-services-api')
    compile project(':play-services-wearable')
    compile project(':unifiednlp-base')
    compile project(':wearable-lib')

    compile project(':remote-droid-guard-lib')

    compile project(':vtm-android')
    compile project(':vtm-extras')
    compile project(':vtm-jts')
    compile project(':vtm-microg-theme')
}

String getMyVersionName() {
    def stdout = new ByteArrayOutputStream()
    if (rootProject.file("gradlew").exists())
        exec {
            commandLine 'git', 'describe', '--tags', '--always', '--dirty'; standardOutput = stdout
        }
    else // automatic build system, don't tag dirty
        exec { commandLine 'git', 'describe', '--tags', '--always'; standardOutput = stdout }
    return stdout.toString().trim().substring(1)
}

int getMyVersionCode() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', '--count', "HEAD"
        standardOutput = stdout
    }
    return Integer.parseInt(stdout.toString().trim())
}

android {
    compileSdkVersion androidCompileSdk()
    buildToolsVersion "$androidBuildVersionTools"

    defaultConfig {
        versionName getMyVersionName()
        def x = getMyVersionCode()
        // We are not allowed to freely choose the hundreds column as it defines the device type
        versionCode(10542400 + x % 100 + ((int) (x / 100)) * 1000)

        minSdkVersion androidMinSdk()
        targetSdkVersion androidTargetSdk()
        jackOptions {
            enabled true
            jackInProcess false
        }
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }

    sourceSets {
        main {
            java.srcDirs += 'src/main/protos-java'
            file("${rootDir}/vtm-android/natives").eachDir() { dir ->
                jniLibs.srcDirs += "${dir.path}/lib"
            }
        }
    }

    lintOptions {
        disable 'MissingTranslation', 'InvalidPackage', 'BatteryLife', 'ImpliedQuantity', 'MissingQuantity'
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

if (file('user.gradle').exists()) {
    apply from: 'user.gradle'
}
